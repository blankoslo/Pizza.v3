server {
    listen 80 default_server;
    listen [::]:80 default_server;
    return 302 https://$host$request_uri;
}

# react frontend
server {
  client_body_buffer_size     32k;
  client_header_buffer_size   8k;
  large_client_header_buffers 4 32k;
  proxy_buffers 4 256k;
  proxy_buffer_size 128k;
  proxy_busy_buffers_size 256k;

  listen 443 default_server ssl;
  listen [::]:443 default_server ssl;

  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

  server_name test_server;

  root /var/www/;
  index index.html index.htm;

  error_page 497 https://$host:443$request_uri;

  location / {
    proxy_pass http://frontend:3000;
    proxy_set_header    Host                $http_host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
  }

  location ^~ /sockjs-node {
    proxy_pass http://frontend:3000;
    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
  
    proxy_redirect off;
  
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # hot module reloading
  location ^~ /ws {
    proxy_pass http://frontend:3000;
    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
  
    proxy_redirect off;
  
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location ^~ /api {
    rewrite /api/(.*) /api/$1  break;
    proxy_pass http://backend:3000;

    proxy_set_header    Host                $http_host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme; 
  }

  location ^~ /swagger {
      rewrite /swagger/(.*) /doc/swagger  break;
      proxy_pass http://backend:3000;

      proxy_set_header    Host                $http_host;
      proxy_set_header    X-Real-IP           $remote_addr;
      proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto   $scheme;
  }

  location ^~ /doc {
      if ($request_uri ~ ^([^.\?]*[^/])$) {
        return 301 $1/;
      }
      rewrite /doc/(.*) /doc/$1  break;
      proxy_pass http://backend:3000;

      proxy_set_header    Host                $http_host;
      proxy_set_header    X-Real-IP           $remote_addr;
      proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto   $scheme; 
  }
}

# next frontend
server {
  client_body_buffer_size     32k;
  client_header_buffer_size   8k;
  large_client_header_buffers 4 32k;
  proxy_buffers 4 256k;
  proxy_buffer_size 128k;
  proxy_busy_buffers_size 256k;

  listen 4000 default_server ssl;
  listen [::]:4000 default_server ssl;

  ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
  ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;

  server_name test_server_2;

  root /var/www/;
  index index.html index.htm;

  error_page 497 https://$host:4000$request_uri;

  location / {
    proxy_pass http://next-frontend:4000;
    proxy_set_header    Host                $http_host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme;
  }

  location ^~ /sockjs-node {
    proxy_pass http://next-frontend:4000;
    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
  
    proxy_redirect off;
  
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  # hot module reloading
  location ^~ /_next {
    proxy_pass http://next-frontend:4000;
    proxy_set_header    Host                $host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
  
    proxy_redirect off;
  
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
  }

  location ^~ /api {
    rewrite /api/(.*) /api/$1  break;
    proxy_pass http://backend:3000;

    proxy_set_header    Host                $http_host;
    proxy_set_header    X-Real-IP           $remote_addr;
    proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
    proxy_set_header    X-Forwarded-Proto   $scheme; 
  }

  location ^~ /swagger {
      rewrite /swagger/(.*) /doc/swagger  break;
      proxy_pass http://backend:3000;

      proxy_set_header    Host                $http_host;
      proxy_set_header    X-Real-IP           $remote_addr;
      proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto   $scheme;
  }

  location ^~ /doc {
      if ($request_uri ~ ^([^.\?]*[^/])$) {
        return 301 $1/;
      }
      rewrite /doc/(.*) /doc/$1  break;
      proxy_pass http://backend:3000;

      proxy_set_header    Host                $http_host;
      proxy_set_header    X-Real-IP           $remote_addr;
      proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
      proxy_set_header    X-Forwarded-Proto   $scheme; 
  }
}